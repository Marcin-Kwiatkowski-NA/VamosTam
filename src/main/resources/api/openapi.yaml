openapi: 3.0.0
info:
  title: BlaBlaTwo Ride Sharing Service
  description: >
    BlaBlaTwo facilitates ride-sharing across Poland, allowing users to post and search for rides, rate their experiences, and communicate with drivers or passengers.
  version: 1.0.0

servers:
  - url: https://api.blablatwo.com
    description: Production server for BlaBlaTwo API

paths:
  /rides:
    get:
      summary: Search for available rides
      operationId: searchRides
      tags:
        - Ride
      parameters:
        - name: startCity
          in: query
          description: The starting city of the ride
          required: true
          schema:
            type: string
        - name: destinationCity
          in: query
          description: The destination city of the ride
          required: true
          schema:
            type: string
        - name: cityStops
          in: query
          description: Optional city stops between the start and destination cities
          required: false
          schema:
            type: array
            items:
              type: string
        - name: departureTime
          in: query
          description: Filter rides based on departure time
          required: true
          schema:
            type: string
            format: date-time
        - name: maxPrice
          in: query
          description: Maximum price per seat
          required: false
          schema:
            type: number
        - name: petFriendly
          in: query
          description: Filter rides that allow pets
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Rides fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ride'
        '400':
          description: Invalid input
        '422':
          description: Unprocessable Entity

    post:
      summary: Create a new ride
      operationId: createRide
      tags:
        - Ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
      responses:
        '201':
          description: Ride successfully created
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /rides/{rideId}:
    get:
      summary: Get detailed information about a specific ride
      operationId: getRideById
      tags:
        - Ride
      parameters:
        - name: rideId
          in: path
          description: Unique identifier for the ride
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ride details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
        '404':
          description: Ride not found

    put:
      summary: Edit an existing ride offer
      operationId: updateRide
      tags:
        - Ride
      parameters:
        - name: rideId
          in: path
          description: Unique identifier for the ride
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
      responses:
        '200':
          description: Ride updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Ride not found

    delete:
      summary: Delete an existing ride offer
      operationId: deleteRide
      tags:
        - Ride
      parameters:
        - name: rideId
          in: path
          description: Unique identifier for the ride
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ride deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Ride not found

  /passengers:
    get:
      summary: View all passengers
      operationId: listPassengers
      description: Allows drivers to search for passengers looking for a ride between cities.
      tags:
        - Passenger
      parameters:
        - name: startCity
          in: query
          description: The starting city for the passenger
          required: true
          schema:
            type: string
        - name: destinationCity
          in: query
          description: The destination city for the passenger
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Ride requests fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Passenger'
        '400':
          description: Invalid input

    post:
      summary: Create a new passenger ride request
      operationId: createPassengerRequest
      description: Allows a passenger to post a request for a ride.
      tags:
        - Passenger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '201':
          description: Ride request successfully created
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /passengers/{passengerId}:
    get:
      summary: Get detailed information about a specific passenger
      operationId: getPassengerById
      tags:
        - Passenger
      parameters:
        - name: passengerId
          in: path
          description: Unique identifier for the passenger
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Passenger details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
        '404':
          description: Passenger not found

    put:
      summary: Edit an existing passenger request
      operationId: updatePassengerRequest
      tags:
        - Passenger
      parameters:
        - name: passengerId
          in: path
          description: Unique identifier for the passenger
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '200':
          description: Passenger request updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Passenger not found

    delete:
      summary: Delete an existing passenger request
      operationId: deletePassengerRequest
      tags:
        - Passenger
      parameters:
        - name: passengerId
          in: path
          description: Unique identifier for the passenger
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Passenger request deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Passenger not found

  /feedback:
    post:
      summary: Submit feedback and rating for a completed ride
      operationId: submitFeedback
      tags:
        - Feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '201':
          description: Feedback submitted successfully
        '400':
          description: Invalid input
        '404':
          description: Ride not found

  /notifications:
    get:
      summary: Fetch all notifications for the user
      operationId: fetchNotifications
      tags:
        - Notification
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          description: User ID for which notifications are fetched
        - name: Accept-Language
          in: header
          schema:
            type: string
          description: Language of the notifications
      responses:
        '200':
          description: Notifications fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: Unauthorized

  /messages:
    get:
      summary: Retrieve message history between a driver and a passenger
      operationId: getMessageHistory
      tags:
        - Message
      parameters:
        - name: conversationId
          in: query
          description: Unique identifier for the conversation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message history fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Conversation not found

    post:
      summary: Send a message between a driver and a passenger
      operationId: sendMessage
      tags:
        - Message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message sent successfully
        '400':
          description: Invalid input
        '404':
          description: Conversation not found

  /api/v1/users:
    get:
      tags:
        - user
      summary: Returns all users
      description: Returns all users, or empty collection if no use found
      operationId: getAllusers
      responses:
        200:
          description: For successful fetch.
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/v1/users/{id}:
    get:
      tags:
        - user
      summary: Returns a user
      description: Returns a users identifiable by given ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User Identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: For successful fetch.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Deletes the user
      description: Deletes the user identifiable by given ID
      operationId: deleteuserById
      parameters:
        - name: id
          in: path
          description: user Identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: Request accepted, returns this status even if user does not exist
          content: {}

  /Cities:
    get:
      tags:
        - city
      summary: Returns all cities
      description: Returns all all cities in database
      operationId: getAllCities
      responses:
        200:
          description: For successful fetch.
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

components:
  schemas:
    City:
      type: object
      properties:
        id:
          description: Unique identifier for the city
          type: string
          format: uuid
        name:
          description: Name of the city
          type: string

    User:
      type: object
      properties:
        id:
          description: Unique identifier for the user
          type: string
          format: uuid
        name:
          description: Name of the user
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          description: Role of the user in the application
          type: string
          enum:
            - DRIVER
            - PASSENGER

    Ride:
      type: object
      properties:
        id:
          description: Unique identifier for the ride
          type: string
          format: uuid
        driver:
          description: Reference to the driver (User ID)
          $ref: '#/components/schemas/User'
        start_city:
          description: Reference to the city where the ride starts
          $ref: '#/components/schemas/City'
        destination_city:
          description: Reference to the destination city
          $ref: '#/components/schemas/City'
        departure_time:
          description: Departure time of the ride
          type: string
          format: date-time
        price:
          description: Price of the ride
          $ref: '#/components/schemas/BigDecimal'
        pet_friendly:
          description: Whether the ride is pet-friendly
          type: boolean
        status:
          description: Current status of the ride
          type: string
          enum:
            - ACTIVE
            - CANCELLED
            - COMPLETED

    CityStop:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the city stop
        ride_id:
          type: string
          format: uuid
          description: Reference to the ride
        city_id:
          type: string
          format: uuid
          description: Reference to the city for the stop
        position:
          type: integer
          description: The position of the city stop in the ride journey

    Passenger:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the passenger booking
        ride_id:
          type: string
          format: uuid
          description: Reference to the ride
        passenger_id:
          type: string
          format: uuid
          description: Reference to the passenger (User ID)
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - CANCELLED
          description: Current status of the passenger booking

    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the feedback
        ride_id:
          type: string
          format: uuid
          description: Reference to the ride being rated
        driver_id:
          type: string
          format: uuid
          description: Reference to the driver (User ID)
        user_id:
          type: string
          format: uuid
          description: Reference to the user giving the feedback
        rating:
          type: integer
          format: int32
          description: Rating score (between 1 and 5)
        comment:
          type: string
          description: Optional comment from the user

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the notification
        user_id:
          type: string
          format: uuid
          description: Reference to the user receiving the notification
        message:
          type: string
          description: The notification message content

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the conversation

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message
        conversation_id:
          type: string
          format: uuid
          description: Reference to the conversation
        sender_id:
          type: string
          format: uuid
          description: Reference to the user sending the message
        receiver_id:
          type: string
          format: uuid
          description: Reference to the user receiving the message
        content:
          type: string
          description: Content of the message
        timestamp:
          type: string
          format: date-time
          description: Timestamp of when the message was sent
    BigDecimal:
      type: BigDecimal


    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        default: 1
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        default: 10
        maximum: 100

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
